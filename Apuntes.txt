SQL: por sus siglas en ingles Strcutured Query Language y en español lenguaje de consulta estructurada, es un lenguaje
    usado para la gestion de base de datos relacionales que permite especificar diversos tipos de operaciones en ellos.



En SQL es una convencion escribir los comandos en mayuculas y las variables , etc en minusculas


La identacion en SQL es de 4 espacios asi en cada nivel de anidacion deberemos emplear 4 espacios.


Para conectar tablas en una consulta se usa el comando JOIN, conectandolas por las llaves primarias y foraneas y ON 
indica el tipo de JOIN que se usara en los casos en que la condicion sea verdadera.

    SELECT * FROM albums 
    JOIN artist ON 
        albums.artist_id = artists.id;



COMANDOS BASICOS:

    Crear una tabla:

        CREATE TABLE table_name (
            column_1 data_type,
            column_2 data_type,
            column_3 data_type
        )



    Insertar una tabla:

        INSERT INTO celebs (id, name, age)
        VALUES (1, "Jutin Bieber", 21);



    Hacer consulta a una tabla ( * es un comodin que permite acceder a todas las tablas sin nombrarlas una por una):

        SELECT * FROM celebs:


    Consulta de una fila:

        SELECT name FROM celebs


    Editar una columna:

        UPDATE celebs
        SET age = 22
        WHERE id = 1;

        ( El punto y coma se pone al final de la consulta que quiere decir que se puede usar por ejemplo si el 
          SET estuviera al final?.... Pues si y no.
          Porque si dejamos el SET al final esto conllevaria a que se actualizaran todas las tablas y para que esto
          no pase tendremos que decirle cual de las tablas queremos modificar.
        )


    Insertar una columna:

        ALTER TABLE celebs ADD COLUMN
        twitter_handle TEXT;


    Un valor null representa informacion faltante o perdida. Al crear una nueva columna en blanco todos sus datos seran
    null.

    Borrar filas:

        DELETE FROM celebs WHERE twitter_handle IS NULL;


    
    CONSULTAS:


        Consulta de las columnas:

            SELECT name, imdb_rating FROM movies;


        Realizar una consulta sin mostrar duplicaciones:

            SELECT DISTINCT genre FROM movies;



        Para filtrar consultas se utiliza WHERE

            SELECT * FROM movies WHERE imdb_rating > 8;

            Esto lo que hace es que selecciona la tabla movies y muestra el imdb_rating sea mayor a 8.


        
        Operadores comunes que se suelen usar con WHERE:

            = equals
            != not equals
            > greater than
            < less than
            >= greater than or equal than
            <= less than pr equal than

            LIKE es un operador especial que se usa con WHERE para buscar todas las coincidencias que encajen en el patron
            que se imponga.

            LIKE no es sensible a las mayusculas y minusculas.

            SELECT * FROM movies
            WHERE name LIKE 'Se_en';

            En este ejemplo se busca una tabla "movies", columna "name", todos los nombres que coincidan con "Se_en" 
            siendo el _ un caracter comodin



            El caracter % es un comodin, indica cero o mas letras faltantes:

            A% coincide con todos los que comiencen con la letra A.
            %a coincide con todos los que terminen con la letra a.
            %man% coincide con todos los que contengan la palabra man.


            BETWEEN:

                Es un operador especial que se usa con WHERE para buscar todas las coincidencias en un intervalo. Pueden ser
                numeros, texto o fechas.

                SELECT * FROM movies
                WHERE  year BETWEEN  1990 and 2000;

                Se puede reproducir aun mas la busqueda añadiendo aun mas restricciones a la consulta:

                SELECT * FROM movies
                WHERE year BETWEEN  1990 AND 2000
                AND  genre = "comedy";


                El operador AND se usa para combinar multiples condiciones , para que coincida un resultado tiene que ser
                verdadero a todas las condiciones. El operador OR se usa para combinar multiples condiciones pero a diferencia,
                del AND solo requiere que una condicion se cumpla.

                SELECT * FROM movies
                WHERE genre = 'comedy'
                OR year < 1980;

                Se pueden ordenar los resultados de la consulta usando ORDER BY ya sea por numero o alfabeticamente.
                Se usa en conjunto con DESC (descente) y ASC (ascendente) para seleccionar de que forma deseas ordenarlo


                SELECT * FROM movies
                ORDER BY imbd_rating DESC;

                Tambien se pueden limitar las busquedas:

                SELECT * FROM movies
                ORDER BY imbd_rating DESC
                LIMIT 3;



    CALCULOS:

        Contar el numero de filas en una tabla:

            SELECT COUNT(*) FROM fake_apps;



        Si usamos count con where es para poder contar las filas con datos especificos 

            SELECT COUNT(*) FROM fake_apps
            WHERE price = 0;

        Contar y agrupar las que sean iguales usando el comando GROUP BY (seleccionamos tambien la columna 
        para que aparezca en la consulta y poder ver a que precio corresponde cada valor)

            SELECT price, COUNT(*) FROM fake_apps
            GROUP BY price;    

        Contar, filtrar y agrupar:

        SELECT COUNT(*) FROM fake_apps
        WHERE downloads > 2000
        GROUP BY price;


        Sumar valores de una columna:

        SELECT SUM(downloads) FROM fake_apps;


        Sumar valores por categoria:

        SELECT category, SUM(downloads) FROM fake_apps
        GROUP BY category;


        Valor maximo de cada categoria:

        SELECT name, category, MAX(downloads) FROM fake_apps
        GROUP BY category;


        Valor promedio en una columna:

        SELECT AVG(downloads) FROM fake_apps;


        Valor promedio en una categoria:

        SELECT price, AVG(downloads) FROM fake_apps
        GROUP BY price;



        Luego para definir el valor de una categoria por decimales se utiliza el ROUND() sin definir el numero de decimales
        y lo toma como valor 0

        SELECT price, ROUND(AVG(downloads)) FROM fake_apps
        GROUP BY price;




    MULTIPLES TABLAS:

        Una "llave primaria" es una columna que registra un identificador unico en cada tabla, es un ID para cada 
        registro, asi aseguramos que en esa columna no se pueden duplicar valores ni tenga un valor NULL. 

        Esto es importante ya que con esto podemos conectar multiples tablas.  
        Por ejemplo si queremos tener tablas de artistas y otra de sus albunes, las podemos conectar por su ID.



        CREATE TABLE artist(
            id INTEGER PRIMARY KEY,
            name TEXT
        );




        Una "llave foranea" es una columna con identificadores primarios de otra tabla, de esta forma podemos contectarlas.
        Esta "llave" puede tener duplicados y nulos 

        ID	Artista
        1	The Beatles
        2	Elvis Presley
        3	Michael Jackson

        y otra tabla de álbumes

        ID	Album	            ID_Artista
        1	Bad	                3
        2	A Hard Days Night	1
        3	Thriller	        3



        Aqui podemos ver que el ID llave primaria de cada tabla es unico, pero en la columna ID_Artista
        que es la llave foranea se repite el 3, esto se debe porque ambos albumes son de un mismo artista, y de esta forma
        se relacionan las dos tablas.



TIPOS DE SENTENCIAS EN SQL:

    SELECT recuperar informacion
    INSERT añadir filas
    DELETE eliminar filas 
    UPDATE modificar filas



    Sentencias de definicion de datos (Lenguaje de definicion de datos LDD):

    CREATE crear objetos de base de datos
    DROP eliminar objetos de base de datos 
    ALTER modificar objeto de base de datos





TIPOS DE DATOS :

    CHAR(longitud): se utiliza para guardar cadenas de caracteres de longitud fija especificada entre parentesis. 
    el espacio no utilizado se rellena con blanco.

    VARCHAR(longitud): almacena cadenas de caracteres de longitud variable cuyo limite maximo es especifica Longitud

    NUMBER(escala, precision): se usa para almacenar datos numericos. La escala indica el numero total de digitos y la precision
    el numero de posiciones decimales.

    DATE: almacena fechas. En algunos SGDBR se puede almacenar tb a hora.




    Datos Numericos:

        Existen tres submodulos dentro de este tipo de datos:

            Enteros: Numeros enteros tantos positivos como negativos. Existen dos tipos de datos pequeños y grandes.
            Con los datos pequeños se definen como smallint y su dominio son los numeros enteros comprendidos entre -32768 y 32768.

            Y los grandes se definen como Integer y su dominio son comprendidos entre -2147483648 y 214743647.

            ¿Porque 214743647 ?

            Es el numero limite superior de un entero con signo de 32 bits (int32 o simplemente int en muchos lenguajes).
            En binario:

                32 bits: 4,294,296 combinaciones posibles
                Con signo: la mitad para negativos, mitad para positivos



